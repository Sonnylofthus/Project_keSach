package com.giang.kesach.resources;

import com.giang.kesach.models.Account;
import com.giang.kesach.models.Book;
import com.giang.kesach.models.BookShelf;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class UserAccountResource implements IUserAccount {
    private static ConnectToSql connectSql = ConnectToSql.getInstance();
    private static Connection con = connectSql.conn;
    private static PreparedStatement stm = null;
    private static String sql = null;
    private static UserInfoResource UR = new UserInfoResource();
    private static ReadListResource RR = new ReadListResource();
    private static WishListResource WR = new WishListResource();

    @Override
    public List<Account> getAllAccount() {
        return null;
    }

    @Override
    public int checkLoginInfo(Account account) {
        try {
            stm = con.prepareStatement("SELECT * FROM account WHERE username=? AND password=?");
            stm.setString(1, account.getUsername());
            stm.setString(2, account.getPassword());
            ResultSet rs = stm.executeQuery();
            int id;
            if (!rs.next())
                return -1;
            else {
                account.setId(rs.getInt("account_id"));
                rs.getInt("account_id");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return -1;
    }

    @Override
    public int createNewAccount(Account account) {
        int count=0;
        try {
            stm=con.prepareStatement("insert Into account(username,password) values(?,?)");
            stm.setString(1,account.getUsername());
            stm.setString(2,account.getPassword());
            count=stm.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public boolean deleteAccount(Account account) {
        return false;
    }

    @Override
    public int changeAccountPassword(Account account) {
       int count=0;
        try {
            stm=con.prepareStatement("update  account set password=? where account_id=?");
            stm.setString(1,account.getPassword());
            stm.setInt(2,account.getId());
            count=stm.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public void accountIni(Account account) {
        account.setUserInfo(UR.getUserInfo(account.getId()));
        account.setReadList(RR.getReadList(account.getId()));
        account.setWishList(WR.getWishList(account.getId()));
    }

    @Override
    public List<BookShelf> showAllBookShelf(int accountId) {

        List<BookShelf> bookShelves=new ArrayList<>();
        try {
            ResultSet rs=connectSql.query("SELECT account_bookshelf.bookShelfs_bookshelf_id,account_bookshelf.Account_account_id,bookshelf.bookshelf_name,bookshelf.description\n" +
                    "FROM account_bookshelf JOIN bookshelf ON account_bookshelf.bookShelfs_bookshelf_id=bookshelf.bookshelf_id AND account_bookshelf.Account_account_id="+accountId);
            while(rs.next()){
                BookShelf bookShelf=new BookShelf();
                bookShelf.setbId(rs.getInt("bookShelfs_bookshelf_id"));
                bookShelf.setbName(rs.getString("bookshelf_name"));
                bookShelf.setDescription(rs.getString("bookshelf.description"));
                bookShelves.add(bookShelf);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookShelves;
    }

    @Override
    public List<Book> showReadBook() {

        return null;
    }
}
